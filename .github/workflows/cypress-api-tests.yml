name: Cypress API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    name: Run API Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Cypress and reporting tools
        run: |
          npm install cypress --save-dev
          npm install mochawesome mochawesome-merge mochawesome-report-generator --save-dev

      - name: Clean previous reports
        run: |
          rm -rf mochawesome-report/
          mkdir -p mochawesome-report

      - name: Run Cypress tests with reports
        run: |
          npm run cypress:run:reports

      - name: Merge JSON reports
        run: |
          # Check if JSON files exist
          if [ -f mochawesome-report/mochawesome.json ]; then
            echo "Found mochawesome.json, merging reports..."
            npx mochawesome-merge mochawesome-report/*.json > mochawesome-report/output.json
          else
            echo "No JSON reports found, creating empty report..."
            echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0,"testsRegistered":0,"passPercent":0,"pendingPercent":0,"other":0,"hasOther":false,"skipped":0,"hasSkipped":false,"start":"","end":"","duration":0},"results":[],"meta":{"mocha":{"version":"7.2.0"},"mochawesome":{"options":{"quiet":false,"reportFilename":"mochawesome","saveHtml":true,"saveJson":true,"consoleReporter":"spec","useInlineDiffs":false,"code":true},"version":"7.1.3"},"marge":{"options":{"mochawesome":{"outputDir":"mochawesome-report","overwrite":false,"html":false,"json":true,"reportTitle":"Cypress API Testing Report","reportPageTitle":"API Test Results","embeddedScreenshots":false,"inlineAssets":true,"saveAllAttempts":false,"code":true,"charts":true,"quiet":false,"displayDuration":true,"duration":true,"timestamp":true}},"version":"6.2.0"}}}' > mochawesome-report/output.json
          fi

      - name: Generate HTML report
        run: |
          # Check if output.json exists and is valid
          if [ -f mochawesome-report/output.json ]; then
            echo "Generating HTML report..."
            npx marge mochawesome-report/output.json -f report -o mochawesome-report --reportTitle "Cypress API Test Results"
          else
            echo "No output.json found, cannot generate HTML report"
            exit 1
          fi

      - name: Verify HTML report
        run: |
          if [ -f mochawesome-report/report.html ]; then
            echo "HTML report generated successfully"
            echo "Report size: $(wc -c < mochawesome-report/report.html) bytes"
            echo "First 100 characters: $(head -c 100 mochawesome-report/report.html)"
          else
            echo "HTML report not found!"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results-${{ github.run_number }}
          path: |
            mochawesome-report/
            cypress/screenshots/

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-html-report-${{ github.run_number }}
          path: mochawesome-report/report.html

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('mochawesome-report/output.json')) {
                const results = JSON.parse(fs.readFileSync('mochawesome-report/output.json', 'utf8'));
                const stats = results.stats;
                const successRate = stats.tests > 0 ? ((stats.passes / stats.tests) * 100).toFixed(2) : '0.00';
                
                const status = stats.failures === 0 ? '✅' : '❌';
                
                const comment = `## ${status} API Test Results
                
                **Summary:**
                - ✅ **Passed:** ${stats.passes}
                - ❌ **Failed:** ${stats.failures}
                - ⏭️ **Skipped:** ${stats.skipped}
                - 📊 **Success Rate:** ${successRate}%
                - ⏱️ **Duration:** ${stats.duration}ms
                
                **Test Files:**
                ${results.results.map(result => `- \`${result.file}\` (${result.stats.passes}/${result.stats.tests} passed)`).join('\n')}
                
                📋 [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                console.log('No test results found');
              }
            } catch (error) {
              console.log('Could not read test results:', error.message);
            }

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ API Tests Failed
            
            Some API tests have failed. Please check the [test results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
            
            **Next Steps:**
            1. Review the test failures
            2. Check if the API endpoints are working correctly
            3. Verify the test data and schemas
            4. Re-run the tests after fixes`;
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  test-summary:
    runs-on: ubuntu-latest
    needs: cypress-run
    if: always()
    name: Generate Test Summary
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: cypress-results-${{ github.run_number }}

      - name: Generate test summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('mochawesome-report/output.json')) {
                const results = JSON.parse(fs.readFileSync('mochawesome-report/output.json', 'utf8'));
                const stats = results.stats;
                const successRate = stats.tests > 0 ? ((stats.passes / stats.tests) * 100).toFixed(2) : '0.00';
                
                console.log(`📊 Test Summary:`);
                console.log(`   Total Tests: ${stats.tests}`);
                console.log(`   Passed: ${stats.passes}`);
                console.log(`   Failed: ${stats.failures}`);
                console.log(`   Skipped: ${stats.skipped}`);
                console.log(`   Success Rate: ${successRate}%`);
                console.log(`   Duration: ${stats.duration}ms`);
                
                // Set output for other jobs
                core.setOutput('total-tests', stats.tests);
                core.setOutput('passed-tests', stats.passes);
                core.setOutput('failed-tests', stats.failures);
                core.setOutput('success-rate', successRate);
                core.setOutput('duration', stats.duration);
              } else {
                console.log('No test results found');
              }
            } catch (error) {
              console.log('Could not read test results:', error.message);
            }
